Index: test/venn-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/venn-test.js	(date 1381222116000)
+++ test/venn-test.js	(date 1381225017000)
@@ -16,7 +16,7 @@
 
       describe("create", function() {
 
-        it("should have empty array with no argument", function() {
+        it("should create empty array (if provided no arguments)", function() {
           venn.create().should.be.empty
           venn.create([]).should.be.empty
         })
@@ -28,6 +28,7 @@
           fstSet.should.not.eql(sndSet)
         })
 
+
         it("should keep different instances which might have the same result", function() {
           var fstSet = venn.create([1,2])
           var sndSet = venn.create([1,2])
@@ -182,7 +183,7 @@
 
       describe("mashups", function (){
 
-        it("should unite and intersect a set of objects", function() {
+        it("should unite and intersect a set of objects without a custom keyFunction", function() {
           var objList = venn.create([
                         {name: "vitor", age: "23"}
                       , {name: "khov", age: "24"}
@@ -200,6 +201,31 @@
           lodash.find(objList, {name: "vitor", age : "23"}).should.be.ok
           lodash.find(objList, {name: "khov", age : "10"}).should.be.ok
           lodash.find(objList, {name: "nuno", age : "20"}).should.be.ok
+        })
+
+        it("should unite and intersect a set of objects with a custom keyFunction", function() {
+
+          var keyFunction = function(item) {
+            return item.id
+          }
+
+          var objList = venn.create([
+                        {id: 0, name: "vitor", age: "23"}
+                      , {id: 1, name: "khov", age: "24"}
+                      , {id: 2, name: "pat", age: "30"}
+                     ], keyFunction )
+                        .intersection([
+                          {id: 2, name: "vitor", age: "23"}
+                        , {id: 2, name: "newguy", age: "0"}
+                        , {id: 2, name: "pat", age: "50"} ])
+                        .union([
+                         {id: 1, name: "khov", age : "10"}
+                       , {id: 10, name: "nuno", age : "20"} ])
+
+          objList.length.should.equal(3)
+          lodash.find(objList, {id: 2}).should.be.ok
+          lodash.find(objList, {id: 1}).should.be.ok
+          lodash.find(objList, {id: 10}).should.be.ok
         })
       })
     })
Index: test/venn-util-test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/venn-util-test.js	(date 1381225017000)
+++ test/venn-util-test.js	(date 1381225017000)
@@ -0,0 +1,95 @@
+if (typeof define !== 'function') { var define = require('amdefine')(module, require) }
+
+define([
+    "../venn-util.js"
+  , "../node_modules/chai/chai.js"
+  ]
+  , function (vennUtil, chai) {
+
+    // Setup
+    var should = chai.should()
+      , expect = chai.expect
+      , testProto = []
+      , oneToThree
+      , threeToSix
+
+    Object.defineProperty(testProto, "testProperty", {
+      value : true,
+      writable : false,
+      enumerable : false
+    })
+
+    return function () {
+
+      describe("venn utils", function() {
+
+        beforeEach(function(){
+          oneToThree = [1,2,4]
+          threeToSix = [3,4,5,6]
+        })
+
+        describe("concat", function() {
+
+          it("it should loose properties after the array concat", function() {
+
+            vennUtil.arraySubClass(oneToThree, testProto)
+            vennUtil.arraySubClass(threeToSix, testProto)
+
+            oneToThree.testProperty.should.be.ok
+
+            var newArray = oneToThree.concat(threeToSix)
+
+            expect(newArray.testProperty).not.ok
+
+          })
+
+          it("it should keep properties after the venn concat ", function() {
+            vennUtil.arraySubClass(oneToThree, testProto)
+            oneToThree.testProperty.should.be.ok
+            var newArray = vennUtil.concat(oneToThree, threeToSix)
+
+            newArray.testProperty.should.be.ok
+            newArray.length.should.equal(7)
+          })
+        })
+
+        describe("remove duplicates", function() {
+
+          it("should return empty array", function (){
+
+            var emptyArray = []
+            vennUtil.arraySubClass(emptyArray, testProto)
+            vennUtil.removeDuplicates(emptyArray)
+
+            emptyArray.length.should.equal(0)
+            emptyArray.testProperty.should.be.ok
+
+          })
+
+          it("should remove duplicates if any (no change)", function (){
+
+            vennUtil.arraySubClass(oneToThree, testProto)
+            oneToThree.testProperty.should.be.ok
+            vennUtil.removeDuplicates(oneToThree)
+
+            oneToThree.length.should.equal(3)
+            oneToThree.testProperty.should.be.ok
+
+          })
+
+          it("should remove duplicates (with change)", function (){
+
+            var duplicatedArray = [1,2,3,4,1,1,1,1,12,3,4,1]
+            vennUtil.arraySubClass(duplicatedArray, testProto)
+            duplicatedArray.testProperty.should.be.ok
+
+            duplicatedArray = vennUtil.removeDuplicates(duplicatedArray)
+
+            duplicatedArray.should.eql([1,2,3,4,12])
+            duplicatedArray.testProperty.should.be.ok
+
+          })
+        })
+      })
+    }()
+  })
Index: venn-util.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venn-util.js	(date 1381225017000)
+++ venn-util.js	(date 1381225017000)
@@ -0,0 +1,57 @@
+if (typeof define !== 'function') { var define = require('amdefine')(module, require) }
+
+define(function () {
+
+  var arraySubClass = [].__proto__
+    ? function(array, prototype) {
+    array.__proto__ = prototype
+  }
+    : function(array, prototype) {
+    for (var property in prototype) array[property] = prototype[property]
+  }
+
+  var concat = function(vennArray, nonVennArray) {
+
+    nonVennArray.forEach(function(element) {
+      vennArray.push(element)
+    })
+
+    return vennArray
+  }
+
+  var removeDuplicates = function(vennArray, keyFunction) {
+
+     var copy = [].concat(vennArray)
+       , visited = {}
+       , key
+    vennArray.length = 0
+
+    keyFunction = keyFunction || bruteForceKeyFunction
+
+    copy.forEach(function(element) {
+
+      key = keyFunction(element)
+
+      if( !visited[key] ) {
+        vennArray.push(element)
+        visited[key] = true
+      }
+    })
+
+    return vennArray
+  }
+
+  var bruteForceKeyFunction = function(value) {
+    if(typeof value == "string" ) {
+      return value
+    }
+    return JSON.stringify(value)
+  }
+
+  return {
+      arraySubClass : arraySubClass
+    , concat : concat
+    , removeDuplicates : removeDuplicates
+    , bruteForceKey : bruteForceKeyFunction
+  }
+})
Index: venn.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- venn.js	(date 1381222116000)
+++ venn.js	(date 1381225017000)
@@ -1,59 +1,53 @@
 if (typeof define !== 'function') { var define = require('amdefine')(module, require) }
 
-define(function() {
+define(["./venn-util.js"]
+ , function(vennUtil) {
 
   var venn_prototype = []
-    , venn = {}
 
   var _union = function(set) {
 
-    var map = this.concat(set)
-      .reduce(function(curr, next) {
-        curr[uid(next)] = next
-        return curr
-      }, {})
-
-    var result = []
-    for (var key in map) {
-      result.push(map[key])
+    return vennUtil.removeDuplicates(
+      vennUtil.concat(this,set), this.keyFunction)
-    }
+  }
 
-    arraySubclass(result, venn_prototype)
-    return result
-  }
-
   var _intersection = function(set) {
 
+    var that = this
+
     if(!set || set.length == 0 || !this || this.length == 0) {
-      set = []
+      this.length = 0
     } else {
-      var map = this.reduce(function(curr, next) {
-        curr[uid(next)] = next
-        return curr
-      }, {})
 
-      set = set.filter(function(key){
+      var copiedVenn = [].concat(this)
+        , visited = {}
+        , key
 
-        var uidKey = uid(key)
+      this.length = 0
 
-        if(map[uidKey])
-        {
-          delete map[uidKey]
-          return true
+      set.forEach(function(element) {
+        visited[getKey.call(that,element)] = true
+      })
+
+      copiedVenn.forEach(function(element) {
+
+        key = getKey.call(that,element)
+        if( visited[key] ) {
+          that.push(element)
+          delete visited[key]
         }
-        return false
       })
     }
 
-    arraySubclass(set, venn_prototype)
-    return set
+    return this
   }
 
-  var uid = function(value) {
-    if(typeof value == "string" ) {
-      return value
+  var getKey = function(value) {
+    if (!this.keyFunction) {
+      return vennUtil.bruteForceKey(value)
+    } else {
+      return this.keyFunction(value)
     }
-    return JSON.stringify(value)
   }
 
   // Venn properties
@@ -69,17 +63,19 @@
     enumerable : false
   })
 
-  var arraySubclass = [].__proto__
-    ? function(array, prototype) {
-    array.__proto__ = prototype
-  }
-    : function(array, prototype) {
-    for (var property in prototype) array[property] = prototype[property]
-  }
-
   return {
-    create: function(array) {
-      return _union.call(array || [], [])
+    create: function(array, keyFunction) {
+      var venn = array || []
+      vennUtil.arraySubClass(venn, venn_prototype)
+
+      Object.defineProperty(venn, "keyFunction", {
+        writable : false,
+        enumerable : false,
+        value : keyFunction
+
+      })
+
+      return venn.union([])
     }
   }
 })
\ No newline at end of file
